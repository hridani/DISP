/*********************************************************************/
/*                             V I D E O C                           */
/*-------------------------------------------------------------------*/
/*   Функции ,създадени на базата BIOS видео прекъсванията,   */
/*        работещи под управлението на C++                .            */
/*********************************************************************/
/*==========Включени заглавни файлове=============*/
#include <dos.h>                               
#include <io.h>
#include <conio.h>
#include <bios.h>
#include "..\include\videoc.h"

/*********************************************************************/
/* GETVIDEOMODE: Чете текущата видеостраница и параметри */
/* Вход       : Няма                                                */
/* Изход     :  номер на текущия видеорежим ,броя на колоните в един ред */
/*                 номер на текущата видеостраница                                  */
/*********************************************************************/
void GetVideoMode(int *VideoMode, int *Number,int * Page)
{
 union REGS Register;       /* променливи за прекъсващата функция */

 Register.h.ah = 15;                              /* номер на финкция */
 int86(0x10, &Register, &Register);            /* извикване на прекъсване 10H */
 *VideoMode = Register.h.al;                /* номер на видеорежим */
 *Number = Register.h.ah;          /* броя на колоните в един рад */
 *Page = Register.h.bh;             /* номер на текущата видеостраница */
}

/*********************************************************************/
/* SETCURSORTYPE: Дефиниране изгледа  на могащия курсор  */
/* Input        :начална линия на курсора, крайна линия на курсора */
/* Output     : Няма                                               */
/* Информация: Параметрите в границите 0-13 за Monochromen  */
/*                Display Adapter, и  0 - 7 са цветна карта            */
/*********************************************************************/
void SetCursorType(int Beginline,int Endl)
{
 union REGS Register;          /* променливи за прекъсващата функция */
   
 Register.h.ah = 1;                               /* номер на функция */
 Register.h.ch = Beginline;              /* начална линия на курсора   */
 Register.h.cl = Endl;                         /* крайна линия на курсора */
 int86(0x10, &Register, &Register);       /* извикване на прекъсване 10H */
}

/*********************************************************************/
/* SETCURSORPOS:Дефиниране на позицията на курсора върху екрана */
/* Вход      : екранна страница съдържаща курсора,нова колона,нов ред */
/* Изход     : Няма                                               */
/* Информация : Позицията на курсора се променя ,само когато тази   */
/*                процедура е извикана при инсталирана текуща */
/*                видеостраница                                                  */
/*********************************************************************/
void SetCursorPos(int Page,int  Column,int CRow)
{
 union REGS Register;         /* променливи за прекъсващата функция */
 Register.h.ah = 2;                               /* номер на функция */
 Register.h.bh = Page;                                /* екранн страница  */
 Register.h.dh = CRow;                                 /* екранен ред */
 Register.h.dl = Column;                            /* екранна колона */
 int86(0x10, &Register, &Register);            /* прекъсване 10H */
}

/*********************************************************************/
/* GETCURSORPOS: Взема позицията на курсора,начална   */
/*                              и крайна линия                                      */
/* Вход       : Няма                                                */
/* Изход      :номер на видеостраницата,колона,ред,начална и крайна линия на курсора     */
/*********************************************************************/
void GetCursorPos(int Page, int *Column, int *CRow,int * Beginline,int *Endl)
{
 union REGS Register;         /* променливи за прекъсващата функция */

 Register.h.ah = 3;                               /* нимер на функция */
 Register.h.bh = Page;                                /* видеостраница */
 int86(0x10, &Register, &Register);            /* прекъсжане 10H */
 *Column = Register.h.dl;                   /* чете резултата на функцията */
 *CRow = Register.h.dh;                     /* от тези регистри */
 *Beginline = Register.h.ch;                /* и ги записва в указаните  */
 *Endl = Register.h.cl;                     /* променливи       */
}

/*********************************************************************/
/* SETSCREENPAGE: Установява екранна стрница за изход на монитора */
/* Вход    :номер на новата екранна страница  */
/* Изход   :Няма                                              */
/*********************************************************************/
void SetScreenPage(int Page)
{
 union REGS Register;          /* променливи за прекъсващата функция */

 Register.h.ah = 5;                               /* номер на функция */
 Register.h.al = Page;                                /* видеостраница*/
 int86(0x10, &Register, &Register);            /* прекъсване 10H */
}

/*********************************************************************/
/* SCROLLUP: Превъртане на екраното пространство нагоре един */
/*               или няколко реда или почисване */
/* Вход    :брой линии за скроол,цвят или атрибути за запълване на линиите*/
/* колона в горния ляв ъгъл,ред в  горния ляв ъгъл, колона и ред  в долния десен ъгъл  */
/* Изход   :Няма                                               */
/* Информация   : Ако число 0 е записано,екранното пространство  */
/*                         се запълва с шпации                              */
/*********************************************************************/
void ScrollUp(int Number,int Color,int  ColumnUL,int CRowUL,int ColumnLR,int CRowLR)
{
 union REGS Register;     /* променливи за прекъсващата функция */

 Register.h.ah = 6;                               /* номер на функция */
 Register.h.al = Number;                          /* брой линии */
 Register.h.bh = Color;                    /* цвят запълване на линиите */
 Register.h.ch = CRowUL;                   /* установяване на координатите */
 Register.h.cl = ColumnUL;                 /* на прозореца за скроол */
 Register.h.dh = CRowLR;                   /* или почистване              */
 Register.h.dl = ColumnLR;
 int86(0x10, &Register, &Register);            /* прекъсване 10H */
}

/*********************************************************************/
/* SCROLLDOUN: Превъртане на екраното пространство надолу един */
/*               или няколко реда или почисване */
/* Вход    :  брой линии за скроол,цвят или атрибути за запълване на линиите, */
/*               колона в горния ляв ъгъл , колона в долния десен ъгъл,ред в долния десен ъгъл */
/* Изход   :Няма                                               */
/* Информация   : Ако число 0 е записано,екранното пространство  */
/*                         се запълва с шпации                              */
/*********************************************************************/
void ScrollDown(int Number,int Color,int ColumnUL,int CRowUL,int ColumnLR,int CRowLR)
{
 union REGS Register;     /* променливи за прекъсващата функция */

 Register.h.ah = 7;                               /* номер на функция */
 Register.h.al = Number;                          /* брой линии */
 Register.h.bh = Color;                    /* цвят запълване на линиите */
 Register.h.ch = CRowUL;                   /* установяване на координатите */
 Register.h.cl = ColumnUL;                 /* на прозореца за скроол */
 Register.h.dh = CRowLR;                   /* или почистване              */
 Register.h.dl = ColumnLR;
 int86(0x10, &Register, &Register);            /* прекъсване 10H */
}

/*********************************************************************/
/* GETCHAR: Чете символа с включени атрибути от указана   позиция на видеоекрана  */
/* Вход  : видеостраница- указана,  екранна колона,екраннен ред,символ на тази позиция */
/*              неговия атрибутивен байт                                    */
/* Изход:Виж по-долу                                                */
/*********************************************************************/
void GetChar(int Page,int Column,int SRow,char *Character,int * Color)
{
 union REGS Register;    /* променливи за прекъсващата функция */
 int Dummy;                          /* запис на ненужната информация */
 int CurPage;                                 /* текуща видеостраница */
 int CurCRow;                                         /* текущ ред */
 int CurColumn;                                    /* текуща колона*/

 GetVideoMode(&Dummy, &Dummy, &CurPage);  /* взема текущата видеостраница */
 GetCursorPos(CurPage, &CurColumn, &CurCRow,     /* взема текущата     */
              &Dummy, &Dummy);                    /* позиция на курсора */
 SetCursorPos(Page, Column, SRow);                     /* установява курсора */
 Register.h.ah = 8;                               /* номер на функция*/
 Register.h.bh = Page;                                /* видеостраница */
 int86(0x10, &Register, &Register);            /* прекъсване 10H */
 *Character = Register.h.al;                /* чете резултата от  */
 *Color = Register.h.ah;                    /* регистрите и замества  */
 SetCursorPos(CurPage, CurColumn, CurCRow);   /* установява старата позиция */
}

/*********************************************************************/
/* WRITECHAR:Пише символ  с указан цвят в текущата          */
/*            позиция на курсора на видеостраницата       */
/* Вход   : видеостраница , в която се пише, ASCII символен код,неговите атрибути или цвят*/
/* Изход :Няма                                                  */
/*********************************************************************/
void WriteChar(int Page,char Character,int Color)
{
 union REGS Register;       /* променливи за прекъсващата функция */

 Register.h.ah = 9;                               /* номер на функция */
 Register.h.al = Character;                        /* символен код */
 Register.h.bh = Page;                                /* видеостраница */
 Register.h.bl = Color;                           /*  цвят на символа */
 Register.x.cx = 1;                   /* дисплейва  символа един път */
 int86(0x10, &Register, &Register);            /* прекъсване 10H */
}

/*********************************************************************/
/* WRITETEXT: Изписва стринг от указана екранна позиция   */
/* Вход     : видеострница,колона за изход, ред за изход,цвят за всички символи  */
/*                екст за изход                                                    */
/* Изход    :Няма                                                   */
/* Информация  : Текстът е указан от символен вектор,който  */
/*            съдържа текста за изход,завършващ със символ '\0'  */
/*********************************************************************/
void WriteText1(int Page,int Column,int SRow,int  Color,char * Text)
{
 union REGS Register;            /* променливи за прекъсващата функция */

 SetCursorPos(Page, Column, SRow);                     /* установява курсора */
 while (*Text)                  /* процес ,докато се достигне символа '\0' */
  {
   WriteChar(Page, ' ', Color);                   /* символен цвят */
   Register.h.ah = 14;                            /* номер на функция  */
   Register.h.bh = Page;                              /* видеостраница */
   Register.h.al = *Text++;                             /* символ */
   int86(0x10, &Register, &Register);              /* прекъсване */
  }
}

/*********************************************************************/
/* CLEARSCREEN: Почиства 80x25 текстов екран           */
/* Вход   :Няма                                                 */
/* Изход  :Няма                                                */
/*********************************************************************/
void ClearScreen()
{
 int CurPage;                                 /* текуща екранна страница */
 int Dummy;                                        /* ненужни променливи */

 ScrollUp(0, NORMAL, 0, 0, 79, 24);                  /* почисва екран */
 GetVideoMode(&Dummy, &Dummy, &CurPage);  /* взема текуща та видеостраница */
 SetCursorPos(CurPage, 0, 0);                          /* установява курсора */
}

