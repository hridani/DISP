/*****************************************************************************/
/*                               V I D E I O   F I E L D                               */
/*----------------------------------------------------------------------------------------------*/
/*     Описание на функциите от клас VFIELD                            */
/*****************************************************************************/
/*==========Заглавни файлове=======================*/
#include <conio.h>
#include <stdlib.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include "..\include\vfield.h"
#include "..\include\svga.h"
#include "..\include\memnew.h"



/*********************************************************************/
/* VField::VField:Конструктор на клас "VField"                   */
/* Вход  : номер на полето,ред и колона,дължина,  цвят и фон */
/*           на символите,текст,указател към предходното поле*/
/* Изход     : Няма                                                          */
/*********************************************************************/
VField::VField(byte nm,byte rw,byte  cl,byte ln,byte at,char *name,VField *bc)
{
   numb=nm; /* номер на полето */
   row=rw;    /* ред */
   col=cl;  /*колона */
   len=ln; /* дължина */  
   atr=at; //атрибут
   if(name!=NULL)
   {
      ptext=new char [strlen(name) +1];//заделяне на памет за текст на полето
      strcpy(ptext,name); //текст
   }
   else
   {
     ptext=new char[len +1];//заделяне на памет за текст на полето
     if(ptext!=NULL)
     {
     	memset(ptext,' ',len);
     	*(ptext + len)='\0';//край на текста
     }
     else
       dprint(0,1,60,0x7,"No memory Ekran");
   }
   next=NULL; /* указател към следващото поле */
   back=bc;   /* указател към предходното */
}
    
VField::~VField()
{
   delete ptext;
}    
/*********************************************************************/
/* ListVF::ListVF :Конструктор на клас "ListVF"                   */
/* Вход  : Няма                                                                  */
/* Изход     : Няма                                                          */
/*********************************************************************/
ListVF::ListVF()
{
  top=0;       /* указател към началото на списъка */
  cur=&top; /* указател към текущото поле */
  bcur=top; /* указател към последното поле */
  nb=0;  /* брой на полетата */      
  col=0;
  row=0;
  sptr=NULL;//указател към изображението в ОП
}
 
/*********************************************************************/
/* ListVF::removeall:Изтриване (унищожаване) на списъка */
/* Вход  : Начало на списъка                                            */
/* Изход : Няма                                                                 */
/**********************************************************************/
ListVF::~ListVF()
{
   removeall(&top);
   if(sptr!=NULL)
   {
     FreeMemory(sptr);
   //  printf("EKRAN ");
   }
   if(name!=NULL)
     delete name;
}

/*********************************************************************/
/* ListVF::L_det_last : Връща указател към последния елемент в списъка,чрез cur */
/* Вход  : Няма                                           */
/* Изход     : Няма                                        */
/******************************************************/
  
/*********************************************************************/
/* ListVF::find : Търсене на възел с указан номер   */
/* Вход  :Номер на възeла ( поле )                        */
/* Изход     : Няма                                        */
/******************************************************/
void ListVF::find (byte number)
{ 
  if(*cur==NULL)    /* празен списък */
   return;
  if((*cur)->numb==number) /* проверка за номера */
    return;
  bcur=*cur;  /* указател към последния елемент */
  cur=&(*cur)->next; /* следващия */
  if(*cur)
  {
     if((*cur)->numb>number) /* проверка за номера на следващия */
       return;
  }
  find(number);  /* рекурсивно извикване */
}

/*********************************************************************/
/* ListVF::add :Добавяне на възел със зададен номер      */
/* Вход  : номер на полето,тип на полето,ред и колона,дължина, */
/*             цвят и фон на символите,указател към текст,            */
/* Изход :`Няма                                                                       */
/******************************************************/
void ListVF::add(byte nm,byte rw,byte cl,byte ln,byte at,char *name)
{
  VField *temp;
  cur=&top; 
  find( nm);
  if(*cur)  /* режим на включване */
  {
    if((*cur)->numb==nm)/* запис върху съществуващ запис */
    {  
       temp=(*cur)->next; /* запомняне на адреса на следващия елемент */
       *cur=new VField(nm,rw,cl,ln, at,name,bcur);
        (*cur)->next=temp; /* инициализиране на указателя към следващия елемант */
    }
    else
    {    
      /* добавяне на запис пред друг ,когато е с по-малък номер */
      (*cur)->back=new VField(nm,rw,cl,ln, at,name,bcur);
      (*cur)->back->next=(*cur);/* инициализиране на указателя към предходния 
                                           (на следващия елемент ) с адреса на текущия запис  */
      bcur->next=(*cur)->back; /* инициализиране на указателя към следващия елемент */
      nb++;   /* увеличаване на броя записи */
    }
  }
  else   /* режим добавяне в края на списъка  */
  {                                                  
        *cur=new VField(nm,rw,cl,ln, at,name,bcur);
        nb++;
  }
}
  
/*********************************************************************/
/* ListVF::saveListVF : Запис във файл на списъка с начало p */
/* Вход  :  Указател към файла , указател към възела  */
/* Изход     : Няма                                      */
/******************************************************/
void ListVF::saveListVF(FILE *f,VField *p)
{
  if(p)
  {   
  /* запис на данните във файла по тип на полето */
    fprintf(f," %u %u %u %u %u %s",((VField *)p)->numb,
                    ((VField *)p)->row,((VField *)p)->col,((VField *)p)->len,
                    ((VField *)p)->atr,((VField *)p)->ptext);
      saveListVF(f,p->next); /* рекурсивно извикване */
   }
}     
 

/*********************************************************************/
/* ListVF::saveall : Запис на списък във файл                      */
/* Вход  : Име на  файла                                               */
/* Изход     : Резултат                                   */
/******************************************************/
void  ListVF::saveall( char *nf )
{    
   FILE *f;
   VField *p=top;  
   if(p)
   {
      f=fopen(nf,"w+t");  /* отваряне на файла */
      if(f==NULL)
        return ;
      else
      {
        fprintf(f,"%u",nb);  /*  брой полета */
        saveListVF(f,top);    
        fclose (f);
         return ;
      }
   }
   else
    return ;
}
  

/*********************************************************************/
/* ListVF::load:Четене на списъка от файл                           */
/* Вход  : Име на  файла                                               */
/* Изход     : Резултат                                     */
/******************************************************/    
unsigned char ListVF::load(char *nf)
{
   FILE *f;  /* указател към файла */
   byte numb=0; /* брой полета  */
   byte nm=0;/* номер на поле */
   byte rw=0;/* ред */
   byte cl=0;/* колона */
   byte ln=0;/* дължина */
   byte atr=0;/* цвят на символите */
   char istr[80];/* указател към текстовия низ */
   
   f=fopen(nf,"r+t");  /*отваряне на файла */
   if(f==NULL)
    return 0;
   else
   {
     fscanf(f,"%d ",&numb);/* прочитане на броя записи(полета) */
     for(int i1=0;i1<numb;i1++)
     {        
        fscanf(f,"%u %u %u %u %u %s ",&nm,&rw,&cl,&ln,&atr,istr);
        add(nm,rw,cl,ln,atr,istr);/* добавяне в списъка */
     }
     fclose(f);   
     return 1;
   }
}

                   
/*********************************************************************/
/* ListVF::removeall:Изтриване (унищожаване) на списъка   */
/* Вход  : Начало на списъка                                            */
/* Изход     : Няма                                      */
/******************************************************/
void ListVF::removeall(VField **p)
{
  if(*p==NULL)
    return;
  removeall(&((*p)->next)); // Изтриване на наследниците 
  delete *p;                           // Изтриване на началото
  nb--;
  *p=NULL;
 }

