/*****************************************************************************/
/*                             S I M P L E    L I S T                          */
/*----------------------------------------------------------------------------------------------*/
/*     Описание на функциите от клас Item,SList                            */
/*****************************************************************************/
/*==========Заглавни файлове=======================*/
#include <conio.h>
#include <stdlib.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include "..\include\slist.h"



/*********************************************************************/
/* Item::Item:Конструктор на клас "Item"                   */
/* Вход  : номер на полето,стойност                         */
/*              указател към предходното поле*/
/* Изход     : Няма                                                          */
/*********************************************************************/
Item::Item(int nm,int val,Item *bc)
{
   numb=nm; /* номер на полето */
   value=val;
   next=NULL; /* указател към следващото поле */
   back=bc;   /* указател към предходното */
}

    
/*********************************************************************/
/* SList::SList :Конструктор на клас "SList"                   */
/* Вход  : Няма                                                                  */
/* Изход     : Няма                                                          */
/*********************************************************************/
SList::SList()
{
  top=0;       /* указател към началото на списъка */
  cur=&top; /* указател към текущото поле */
  bcur=top; /* указател към последното поле */
  nb=0;  /* брой на полетата */
}
 
/*********************************************************************/
/* SList::~SList :Деструктор на клас "SList"                   */
/* Вход  : Няма                                                                  */
/* Изход     : Няма                                                          */
/*********************************************************************/
SList::~SList()
{
   removeall(&top);
}

             
  
/*********************************************************************/
/* SList::find : Търсене на възел с указан номер   */
/* Вход  :Номер на възeла ( поле )                        */
/* Изход     : Няма                                        */
/******************************************************/
void SList::find (int number)
{ 
  if(*cur==NULL)    /* празен списък */
   return;
  if((*cur)->numb==number) /* проверка за номера */
    return;
  bcur=*cur;  /* указател към последния елемент */
  cur=&(*cur)->next; /* следващия */
  if(*cur)
  {
     if((*cur)->numb>number) /* проверка за номера на следващия */
       return;
  }
  find(number);  /* рекурсивно извикване */
}
/*********************************************************************/
/* SList::add :Добавяне на възел със зададен номер      */
/* Вход  : номер на полето,тип на полето,ред и колона,дължина, */
/*             цвят и фон на символите,указател към текст,            */
/* Изход :`Няма                                                                       */
/******************************************************/
void SList::add(int nm,int val)
{
  Item *temp;
  cur=&top; 
  find( nm);
  if(*cur)  /* режим на включване */
  {
    if((*cur)->numb==nm)/* запис върху съществуващ запис */
    {  
       temp=(*cur)->next; /* запомняне на адреса на следващия елемент */
       *cur=new Item(nm,val,bcur);
        (*cur)->next=temp; /* инициализиране на указателя към следващия елемант */
    }
    else
    {    
      /* добавяне на запис пред друг ,когато е с по-малък номер */
      (*cur)->back=new Item(nm,val,bcur);
      (*cur)->back->next=(*cur);/* инициализиране на указателя към предходния 
                                           (на следващия елемент ) с адреса на текущия запис  */
      bcur->next=(*cur)->back; /* инициализиране на указателя към следващия елемент */
      nb++;   /* увеличаване на броя записи */
    }
  }
  else   /* режим добавяне в края на списъка  */
  {                                                  
        *cur=new Item(nm,val,bcur);
        nb++;
  }
}


/*********************************************************************/
/* SList::removeall:Изтриване (унищожаване) на списъка   */
/* Вход  : Начало на списъка                                            */
/* Изход     : Няма                                      */
/******************************************************/
void SList::removeall(Item **p)
{
  if(*p==NULL)
    return;
  removeall(&((*p)->next)); // Изтриване на наследниците 
  delete *p;                           // Изтриване на началото
  nb--;
  *p=NULL;
 }

