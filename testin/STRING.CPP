/****************************************************************************************************************/
/*                                         S T R I N G . C P P                                                                       */
/*     Описание на функции  за работа с низове и преобразуване на данни от един тип в друг */
/****************************************************************************************************************/
#include <string.h>
#include <stdlib.h>
#include <sys\types.h>
#include <sys\stat.h>
#include "string.h" 
#include "comst.h"

/***********************************************************************************/
/* UnsToStr: Преобразува цяло беззнаково число /тип unsigned  / в стринг */
/* Входни данни:Числото и указател към стринга,в които се записва */
/* Изходни данни: Няма                                                                       */
/************************************************************************************/
void UnsToStr(unsigned u,char *str)
{
   char strDigits[6]; //помощен буфер
   char *pch; //указател към помощния буфер
  if (u>65535)  //числото е извън границата за числа unsigned
    return ;     //изход без преобразуванe
    //Записваме цифрите с str отзад напред.Запичваме да ги записваме достатъчно навътре 
    // в низа ,за да може да поберем възможно най - голямата стойност на u 
   pch=&strDigits[5];
   *pch='\0';
   do
    *--pch=(u%10)+'0'; /* запиис на извлечената цифра като символ */
   while((u/=10)>0); //намалчваме числото с една цифра
   strcpy(str,pch); //копиране на числото-текст в стринга
}      


/***********************************************************************************/
/* IntToStr: Преобразува цяло число /тип int / в стринг                       */
/* Входни данни:Числото и указател към стринга,в които се записва */
/* Изходни данни: Няма                                                                       */
/************************************************************************************/
void IntToStr(int i,char *str)
{ 
  if(i<-32767 && i>32768)  //числото е извън границата за числа int 
    return ;//изход без преобразуванe
  if(i<0)  /* отрицателно число */
  {
     *str++='-';  /* добавяне на знак '-'   */
     i=-i;  /* инвертиране на числото  */
  }
  UnsToStr((unsigned )i,str);/* преобразуване на беззнаково число в стринг */
} 

/***********************************************************************************/
/* UnsLToStr: Преобразува цяло число /тип long / в стринг                       */
/* Входни данни:Числото и указател към стринга,в които се записва */
/* Изходни данни: Няма                                                                       */
/************************************************************************************/
void UnsLToStr(unsigned long u,char *str)
{
   char strDigits[11]; //помощен буфер
   char *pch; //указател към помощния буфер
    //Записваме цифрите с str отзад напред.Запичваме да ги записваме достатъчно навътре 
    // в низа ,за да може да поберем възможно най - голямата стойност на u 
   pch=&strDigits[10]; //иниц. на указателя
   *pch='\0';
   do        
     *--pch=(char )((u%10)+'0');/* запиис на извлечената цифра като символ */ 
   while((u/=10)>0); //намалчваме числото с една цифра
   strcpy(str,pch);//копиране на числото-текст в стринга
}      

/***********************************************************************************/
/* LongToStr: Преобразува цяло число /тип long / в стринг                       */
/* Входни данни:Числото и указател към стринга,в които се записва */
/* Изходни данни: Няма                                                                       */
/************************************************************************************/
void LongToStr(long i,char *str)
{                       
  if(i<0) /* отрицателно число */
  {
     *str++='-';    /* добавяне на знак '-'   */
     i=-i;          /* инвертиране на числото  */
  }
  UnsLToStr((unsigned long)i,str); /* преобразуване на беззнаково число в стринг */
} 


/***************************************************************************************/
/* STRCPY :Функцията копира стрингов низ в друг с посочен размер     */
/* Входни данни:Стринг приемник,стринг източник,размер на приемника */
/* Изходни данни : Стринг приемник                                                        */
/***************************************************************************************/
char *STRCPY(char *pchTo,char *pchFrom,int size)
{
   char *pchStart=pchTo; //стринг приемник
   int br=0; //брой копирани символи
   while((*pchTo++=*pchFrom++)!=0) //копиране в приемника до '\0' в източника
   {  
      br++;
      if(br>=size) // при брой откопирани символи > размера - прекъсване
       break;
   }
  if(br>=size)  // ограничаване на стринга приемник при брой символи >размера
     *(pchStart +size)='\0';
   else  //при по-малък брой -допълване със ' '
   {
   pchTo--;  //връщане на указателя с 1 позиция,защото сочи '\0' 
   while((size-br)>0)  //докато се достигне размера
   { 
      (*pchTo++)=' '; //добавяне на ' '
      br++;//увеличаване на броя на копираните символи
   }
   *pchTo='\0';//край на стринга -приемник
  }
   return (pchStart);//връщане на приемника
}

/*************************************************************************************/
/*  Insertsr :Функцията добавя на определено место в символния низ   */
/*                посочения символ                                                             */
/* Вход: Символен низ,символ,който се добавя , позиция                     */
/* Изход:Няма                                                                                      */
/*************************************************************************************/  
void Insertsr(char *str,char ch,int pos)
{ 
    int i=0;
    char *wrs; /* помощен указател към низ */
    char *p=str; /* p - сочи към str */
    if(pos >=0)
    {
    if(fNewMemory((void **)(& wrs),strlen(str) + 2,&"String")==FALSE) //заделяне на памет за помощния указател 
      return; //няма памет
    while(*p)
    {
      if(i==pos)
      wrs[i++]=ch; /* добавяне на символа,който се променя */
      else
      wrs[i++]=*p++; /* добавяне на символите ,които не се променят */
    }
    wrs[i]='\0'; /* край на новополучения низ */
    strcpy(str,wrs); /* копиране */
    FreeMemory(wrs); /* освобождаване на паметта */
   }
   else
   {
     int len=strlen(str) + abs(pos)+2 ;
       if(fNewMemory((void **)(& wrs),len+1,&"String")==FALSE) //заделяне на памет за помощния указател 
      return; //няма памет
     wrs[0]='0';
     wrs[1]='.';
     for(int i=0;i>pos;i--)
       wrs [2 - i]='0';
    i=abs(pos)+2;
    while(i<len)
    {
      wrs[i++]=*p++; /* добавяне на символите ,които не се променят */
    }
    wrs[i]='\0'; /* край на новополучения низ */
    strcpy(str,wrs); /* копиране */
    FreeMemory(wrs); /* освобождаване на паметта */
   }

}


/***************************************************************************************/
/* Deletechar :Изтриване на символ от даден низ на  посочената позиция      */
/* Входни данни:Стринг,позиция на символа                                              */
/* Изходни данни :Няма                                                                            */
/***************************************************************************************/
void Deletechar(char *pchTo,int pos)
{
  char *str; // помощен указател              
  char *pr1,*st1;  // помощен указател              
  pr1=pchTo;  //иниц. на помощния указател
  int tp=0;  //текуща позиция в стринга
  int len=strlen(pchTo);//дължина на стринга
  if(fNewMemory((void **)(&str),len +1,&"String")!=FALSE) //заделяне на памет за пом. указател
  {
    memset(str,' ',len); //почистване на помощния стринг
    *(str+len)='\0';
    st1=str;//начало на помощния стринг
    while(*pchTo) //докато има символи в стринг
    {
       if(tp!=pos)  //достигната ли е позицията на символа,който ще се изтрива
           *str++=*pchTo++;  //не - копиране в помощния стринг
       else  //да - пропускане на символа
             pchTo++;
       tp++;  // увеличаване на текущата позиция
     }
     strcpy(pr1,st1);//копиране на новия стринг /без посочения символ / в стария стринг
     FreeMemory(st1);//освобождаване на паметта от помощния стринг
  }
}
 
/***************************************************************************************/
/* STRSRCH:Tърсене на низ в друг низ                                                  */
/* Входни данни:Стринг,в който се търси и търсения стринг                    */
/* Изходни данни :Указател към намерения низ или NULL                      */
/***************************************************************************************/
char * STRSRCH(char *strTo,char *strF)
{   
   char *strN=NULL;  // помощен стринг
   char *strNC=NULL;// помощен стринг
   int i=0; // помощена променлива
   unsigned char flag=1; //флаг за намерен низ
   while(*strTo!=NULL)  // ако има низ, който се търси
   {    
     if(*strTo==*strF)  //сравнение на символ от двата низа
     {  // еднакви 
            strNC=strTo;//продължава се претърсването от това место
          strTo++; //следващ символ в низа ,от който се търси
            i=1; // брай еднакви символи
         do
       {                            
            if(*strTo!=*(strF+i))  //различни ли са следващите символи
              {
                  flag=0;// няма еднаквост
            i=0; // 0 съвпадащи символи
            break;  //изход от цикъла за сравнение
             }
             i++;//съвпадение - увеличаване на търсените съвпадащи символи
             strTo++; //следващ символ в низа ,от който се търси
         }
        while(*(strF+i)!=NULL); //докато търсения низ не достигне края си
        if(flag!=0) //има еднаквост - намерен е низа
        {  
          strN=strNC; //указател към началото на намерения низ
          break;  // изход 
        }
        flag=1;
     }
     else //  няма  низ
      strTo++;  //следващ символ в низа ,от който се търси
   }
   return strN;// начало на низа или NULL
}
   
/***************************************************************************************/
/* STRCHR:Tърсене на символ в  низ                                                  */
/* Входни данни:Стринг,в който се търси и символа за търсене            */
/* Изходни данни :Указател към намерения символ или NULL                */
/***************************************************************************************/
char  *STRCHR(char *pv,unsigned char ch)
{
   char *pch=pv;  //помощен указател = низа
   int len=strlen(pch);// дължина на низа
   while(len-- > 0) //докато не се достигне края на низа
   {
      if(*pch==ch)  //сравнение
       return (pch);  //да - връщане на указател към намерения символ в низа
      pch++; //следващ символ
   }
   return (NULL);  //няма символ - указател  NULL
}

/***************************************************************************************/
/* STRCOPY:Копиране на низ в друг низ от определена позиция           */
/* Входни данни:Стринг-приемник,стринг за копиране ,позиция            */
/* Изходни данни:Стринг,състоящ се от двата стринга                          */
/***************************************************************************************/
char * STRCOPYEDIT(char *strTo,char *strF,int pos)
{   
   char *strN=NULL;
   char *strNC=NULL;
   int i=0,j=0,l=0;
   unsigned char flag=1;
   int len=0,len1=0;
   len=strlen(strTo);//дължина на стринга приемник
   strN=strTo;//иниц. с началото на стринга приемник
   strNC=(strTo+pos); // иниц. с позиция отстояща от началото на pos символа
   len1=strlen(strF); // дължина на стринга за вмъкване
   strTo=new char[len+len1+2];// трябва да се задели памет в UMB блоковете
//    NewMemoryUMB((void**)(&strTo),len+len1+2);//от 31.05.2001
    memset(strTo,' ',len+len1+1); // почисване на низа
    *(strTo+len+len1+1)='\0'; //край на новия низ
    while(i!=pos)  //докато не е достигната позицията за вмъкване
    {
      *(strTo+i)=*(strN+i); //копиране от стринга приемник
      i++;  //брай копирани сиомволи
   }
   j=0; //брой копирани символи от стринга за вмъкване 
   while(*(strF+j)!=NULL)  //докато има символи в стринга за вмъкване некопирани
   {
     *(strTo+i+j)=*(strF+j); //копиране в новия низ от стринга за вмъкване 
      j++;  //  //брой копирани символи от стринга за вмъкване 
   }
    *(strTo+i+j++)=' '; // празен символ
   while(*(strNC +l)!=NULL)  //докато не се достигне края на стринга приемник
   { 
      *(strTo+i+j+l)=*(strNC+l); //копиране на останалите символи от стринга приемник в новия низ
      l++;  // брой копирани симоли от стринга приемник - останали след вмъкването
   }
  //delete strN;
  FreeMemory(strN);
   return strTo;//връщане на указател към стринга ,събрал двата стринга
}

/***************************************************************************************/
/* STRCOPY:Вмъкване на  низ в друг низ от определена позиция           */
/* Входни данни:Стринг-приемник,стринг за копиране ,позиция            */
/* Изходни данни:Нов Стринг,състоящ се от двата стринга                          */
/* Забележка: strTo /стринга приемник/ де е заделен ,чрeз new    */
/***************************************************************************************/
char * STRCOPY(char *strTo,char *strF,int pos)
{ 
   char *strN=NULL;//начало на примника
   char *strNC=NULL;//указател към позицията за вмъкване
   int i=0,j=0,l=0;
   unsigned char flag=1;
   int len=0,len1=0;
   len=strlen(strTo);//дължина на стринга приемник
   strN=strTo;//иниц. с началото на стринга приемник
   strNC=(strTo+pos); // иниц. с позиция отстояща от началото на pos символа
   len1=strlen(strF); // дължина на стринга за вмъкване
   int ln=len+len1;//дължина на новия стринг
    strTo=new char[ln+1]; //заделяне на памет за новия низ
    memset(strTo,' ',ln); // почистване на низа
    *(strTo+ln)='\0'; //край на новия низ
    while(i!=pos)  //докато не е достигната позицията за вмъкване
    {
      *(strTo+i)=*(strN+i); //копиране от стринга приемник
      i++;  //брай копирани сиомволи
   }
   j=0; //брой копирани символи от стринга за вмъкване 
   while(*(strF+j)!=NULL)  //докато има символи в стринга за вмъкване некопирани
   {
     *(strTo+i+j)=*(strF+j); //копиране в новия низ от стринга за вмъкване 
      j++;  //  //брой копирани символи от стринга за вмъкване 
   }
    while((i+j+l) <ln)   
   { 
      *(strTo+i+j+l)=*(strNC+l); //копиране на останалите символи от стринга приемник в новия низ
      l++;  // брой копирани симоли от стринга приемник - останали след вмъкването
   }
   delete strN;//освобождаване на паметта от стринга приемник ,защото има нов стринг
   return strTo;//връщане на указател към стринга ,събрал двата стринга
}


/***********************************************************************************/
/* strFindUns: Преобразува  стринг  в цяло беззнаково число /тип unsigned  / */
/* Входни данни:Указател към стринга и указател към числото                */
/* Изходни данни: Флаг за резултата                                                                       */
/************************************************************************************/
flag strFindUns(char *strTo,unsigned *u)
{                                         
   flag susflag=FALSE;//флаг за преобразуване в число
   char *strw=strTo; //указател към стринга за преобразуване
   int st10=1;// променлива за десетичната стойност на цифрата
   *u=0;                      
   //проверка за  символи != цифри
   do                        
   {
     if(*strw>'9' || *strw<'0')  // символ- не е цифра
      break;  //прекъсване
     strw++;     //следващ символ
   }
   while(*strw!=NULL);  //докато се достигне края
   while(strw--!=strTo) //започва преобр. в число от края на низа
   {
     *u=((*strw )- '0' ) * st10 + *u ;  //извличане на символ-цифра и преобразуване в цифра и запис в числото на подх. място
     st10=st10*10; //изчисляване на положението на цифрата -единица,десетица и т.н    
     susflag=TRUE; //флаг за  преобразуване
   }
   return susflag; // флаг за преобразуване
}

/***********************************************************************************/
/* strFindInt: Преобразува  стринг  в цяло число /тип int  /                   */
/* Входни данни:Указател към стринга и указател към числото                */
/* Изходни данни: Флаг за резултата                                                                       */
/************************************************************************************/
flag strFindInt(char *strTo,int *i)
{                                         
   flag susflag=FALSE;//флаг за преобразуване в число
   char *strw=strTo;  //указател към стринга за преобразуване
   if(*strTo=='-')  // число със знак
   {
       if(strFindUns(++strw,(unsigned * )i)==TRUE) // преобразуване на стринга в число
       {              // успешно
                  *i=-(*i); // добавяне на знака
                  return TRUE; // успешно преобразуване
       }
       else 
       return FALSE;  // неуспешно преобразуване
   }  
   else
     return    strFindUns(strw,(unsigned *)i);
}

/***********************************************************************************/
/* strFindUnsL: Преобразува  стринг  в цяло дълга беззнаково число /unsigned long / */
/* Входни данни:Указател към стринга и указател към числото                */
/* Изходни данни: Флаг за резултата                                                                       */
/************************************************************************************/
flag strFindUnsL(char *strTo,unsigned long *u)
{                                         
   flag susflag=FALSE;//флаг за преобразуване в число
   char *strw=strTo; //указател към стринга за преобразуване
   int st10=1;// променлива за десетичната стойност на цифрата
   *u=0;
   do                        
   {
     if(*strw>'9' || *strw<'0')  // символ- не е цифра
      break; //прекъсване
     strw++;     //следващ символ   
   }
   while(*strw!=NULL); //докато се достигне края
   while(strw--!=strTo)  //започва преобр. в число от края на низа
   {
     *u=((*strw )- '0' ) * st10 + *u ;   //извличане на символ-цифра и преобразуване в цифра и запис в числото на подх. място
     st10=st10*10; //изчисляване на положението на цифрата -единица,десетица и т.н    
     susflag=TRUE;//флаг за  преобразуване
   }
   return susflag; // флаг за преобразуване
}

/***********************************************************************************/
/* strFindLong: Преобразува  стринг  в цяло число /тип long /                   */
/* Входни данни:Указател към стринга и указател към числото                */
/* Изходни данни: Флаг за резултата                                                                       */
/************************************************************************************/
flag strFindLong(char *strTo,long *i)
{                                         
   flag susflag=FALSE;//флаг за преобразуване в число
   char *strw=strTo; //указател към стринга за преобразуване
   if(*strTo=='-')  // число със знак
   {
       if(strFindUnsL(++strw,(unsigned long * )i)==TRUE)// преобразуване на стринга в число
       {       // успешно
                  *i=-(*i);  // добавяне на знака
                  return TRUE; // успешно преобразуване
       }
       else 
       return FALSE;// неуспешно преобразуване
   }  
   else
     return    strFindUnsL(strw,(unsigned long *)i);
}





/*************************************************************************************/
/* Number_convert : Преобразуване на число (int,double и др ) в низ      */
/* Вход: Тип на числото за преобразуване или на символ и текст за */
/*          запис на ново место ,указател към числото,символа или текста в паметта,*/        
/*           указател към низа               */
/* Изход:Няма                                                                                      */
/*************************************************************************************/  
void  Number_convert(char type,void *pr,char *str)
{
    char *Arrows; /* помощен указател */
     int dec=0; /* брой на символите преди десетичната точка */
    int sign=0; /* знак ( 0- няма знак,1- има занк */

    switch (type)   /* тип на данните */                                                                                
    {
      case 'i':  /* int */
       IntToStr(*(int *)pr,str);
      break;

      case 'l':  /* long */
       LongToStr(*(long *)pr,str);
      break;

      case 'b':  /* long unsigned*/
       UnsLToStr(*(long *)pr,str);
      break;

      case 'u': /* unsigned int*/
         UnsToStr(*(unsigned *)pr,str) ;
      break;

      case 'd': /* double */
         Arrows=_fcvt((*(double *)pr),5,&dec,&sign); /* преобразуване на double в string */
         *(Arrows +strlen(Arrows)-2)='\0';
         if(dec < -3)
           dec=-3;
           
         Insertsr(Arrows,'.',dec); /* добавяне на десетична точка */
         if(sign==1) /* има ли знак ? */
           Insertsr(Arrows,'-',0); /* добавяне на знак '-' */
          strcpy(str,Arrows);
      break;
      
      case 's' : //string
        strcpy(str,(char *) pr);
        break;
      case 'c': //char 
         *str=*(char *)pr;
         break; 
     }
}      

/*************************************************************************************/
/* String_convert : Преобразуване на низ в число (int,double и др )         */
/* Вход: Тип на числото за преобразуване,указател към низа ,            */
/*           указател към числото в паметта                                             */
/* Изход:Няма                                                                                      */
/*************************************************************************************/  
void String_convert(char type,char *str,void *pr)
{
      switch (type)
      {
      case 'i':  /* int */
        strFindInt(str,(int *)pr); /* преобразуване на низ в цяло число */
        break;
      case 'l':         /* long */
        strFindLong(str,(long *)pr); /* преобразуване на низ в дълго цяло число  */
        break;
      case 'd': /* double */
          *(double *)pr=atof(str);  /* преобразуване на низ в реално */
        break;
      case 'u': /* unsigned */
        strFindUns(str,(unsigned *)pr); /* преобразуване на низ в беззнаково цяло число*/
        break;                                  
      case 'b':/* long unsigned */
        strFindUnsL(str,(unsigned long *)pr); /* преобразуване на низ в дълго беззнаково  */
        break;
      }
}


/***************************************************************************************/
/* STRCPY :Функцията копира стрингов низ в друг с посочен размер     */
/* Входни данни:Стринг приемник,стринг източник,размер на приемника */
/* Изходни данни : Стринг приемник                                                        */
/***************************************************************************************/
char *STRCPYCEN(char *pchTo,char *pchFrom,int size)
{
   char *pchStart=pchTo; //стринг приемник
   int br=0; //брой копирани символи
   int len,start;
   len=strlen(pchFrom);
   start=size/2 - len/2;
   for(int i=0;i<start;i++)
      (*pchTo++)=' '; //добавяне на ' '
   while((*pchTo++=*pchFrom++)!=0) //копиране в приемника до '\0' в източника
   {  
      br++;
      if(start +br>=size) // при брой откопирани символи > размера - прекъсване
       break;
   }
  if(start + br>=size)  // ограничаване на стринга приемник при брой символи >размера
     *(pchStart +size)='\0';
   else  //при по-малък брой -допълване със ' '
   {
   pchTo--;  //връщане на указателя с 1 позиция,защото сочи '\0' 
   while((size- (start+br))>0)  //докато се достигне размера
   { 
      (*pchTo++)=' '; //добавяне на ' '
      br++;//увеличаване на броя на копираните символи
   }
   *pchTo='\0';//край на стринга -приемник
  }
   return (pchStart);//връщане на приемника
}

/*************************************************************************************/
/*  Insertsr :Функцията добавя на определено место в символния низ   */
/*                посочения символ                                                             */
/* Вход: Символен низ,символ,който се добавя , позиция                     */
/* Изход:Няма                                                                                      */
/*************************************************************************************/  
void Insertstr(char *str,char ch,int pos)
{ 
    int i=0;
    char *wrs; /* помощен указател към низ */
    char *p=str; /* p - сочи към str */
    int l=strlen(str);
    if(pos >=0)
    {
    if(fNewMemory((void **)(& wrs),l + 2,&"String")==FALSE) //заделяне на памет за помощния указател 
      return; //няма памет
    while(*p)
    {
      if(i==pos)
      wrs[i++]=ch; /* добавяне на символа,който се променя */
      else
      wrs[i++]=*p++; /* добавяне на символите ,които не се променят */
    }
    wrs[i-1]='\0'; /* край на новополучения низ */
    strcpy(str,wrs); /* копиране */
    FreeMemory(wrs); /* освобождаване на паметта */
   }
   else
   {
     int len=strlen(str) + abs(pos)+2 ;
       if(fNewMemory((void **)(& wrs),len+1,&"String")==FALSE) //заделяне на памет за помощния указател 
      return; //няма памет
     wrs[0]='0';
     wrs[1]='.';
     for(int i=0;i>pos;i--)
       wrs [2 - i]='0';
    i=abs(pos)+2;
    while(i<len)
    {
      wrs[i++]=*p++; /* добавяне на символите ,които не се променят */
    }
    wrs[i]='\0'; /* край на новополучения низ */
    strcpy(str,wrs); /* копиране */
    FreeMemory(wrs); /* освобождаване на паметта */
   }

}
